#lang racket
(define lst1 '(1 2 3))
(define lst2 '(-2 0))
#|
(define lst1 '(-2 0))
(define lst2 '(1 2 3))
|#

; Different results

#|
(map (lambda (x) (* 1 x)) lst1)
(map (lambda (x) (* 2 x)) lst1)
(map (lambda (x) (* 3 x)) lst1)
|#


(map (lambda (y) (map (lambda (x) (* y x)) '(-2 0))) '(1 2 3))

#|
(map (lambda (y) (map (lambda (x) (* y x)) '(-2 0 2))) '(1 2 3))
|#

(define (mult-all-pairs lst1 lst2)
  (apply   ; flatten the result
   append
   (map
    (lambda (x) (map ((curry *) x) lst2))
    lst1)))                               

(mult-all-pairs lst1 lst2)
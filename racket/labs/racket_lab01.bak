#lang racket


(define (my-even n)
  (cond [(< n 0) (my-even (- n))] 
        [(= n 1) #f]
        [(= n 0) #t]
        [else (my-even (- n 2))]))

(my-even 10)
(my-even 5)
(my-even -5)
(my-even -10)


(define (addition num1 num2)
  (+ num1 num2))

(displayln "\nThese are the results of the second function: ")
(addition 5 1)
(addition 60 1)
(addition 5 5)

#|
(define (copy-str n str)
  (cond [(= n 1) str]
        [else (string-append (copy-str (- n 1) str))]))
|#

(define (copy-str n str)
  (cond [(= n 1) str]
        [else (string-append str (copy-str (- n 1) str))]))

(copy-str 3 "abc")
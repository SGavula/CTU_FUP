#lang racket

(require 2htdp/image)

(provide img->mat ascii-art)

(define chars " .,:;ox%#@")

(define (img->mat img)
  (define (create-mat width i lst [acc '()])
    (cond [(empty? lst) (list (reverse acc))]
          [(= i 0) (cons (reverse acc) (create-mat width (- width 1) (cdr lst) (list (car lst))))]
          [else (create-mat width (- i 1) (cdr lst) (cons (car lst) acc))]
          ))

  (create-mat (image-width img) (image-width img) (map RGB->grayscale (image->color-list img)))
  )

(define (ascii-art width height chars)
  (+ 2 2))

(define (RGB->grayscale color)
  (+ (* 0.3 (color-red color))
     (* 0.59 (color-green color))
     (* 0.11 (color-blue color))))

(define example 
  (above
    (beside (rectangle 2 1 "solid" (make-color 0 0 0))
            (rectangle 3 1 "solid" (make-color 75 75 75)))
    (beside (rectangle 2 3 "solid" (make-color 180 180 180))
            (rectangle 3 3 "solid" (make-color 225 225 225)))))

(define img (triangle 5 "solid" "violet"))

; (displayln example)
; (displayln img)
; (image-width img)
; (image->color-list img)
; (map RGB->grayscale (image->color-list img))
; (map RGB->grayscale (image->color-list example))
(img->mat example)